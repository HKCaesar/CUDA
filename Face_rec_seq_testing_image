#include "opencv2/opencv.hpp"
#include <fstream>
#include <opencv2/core/core.hpp>
#include <iostream>
#include <string>

using namespace cv;
using namespace std;

int main()
{
	size_t num_removed_eigenfaces=0; // =total_eigenfaces-desired_num_of_eigenfaces;

    FileStorage fs;
    fs.open("data_5_10.xml", FileStorage::READ);

    Mat mean_vec;
        fs["mean"] >> mean_vec;

     mean_vec=mean_vec.reshape(0,10304);

    Mat eigenvalues;
              fs["eigenvalues"] >> eigenvalues;
              //cout<<eigenvalues<<endl;

    Mat eigenvectors;
              fs["eigenvectors"] >> eigenvectors;
             // cout<<eigenvectors.at<double>(0,1)<<endl;

    Mat eigenvectors1(10304,50,CV_64F,Scalar(1));
             for(int q=0;q<eigenvalues.rows;q++)
            	 {
            	  Mat value=eigenvalues.row(q);
            	  double val=value.at<double>(0,0);

            	  //cout<<eigenvectors.col(0)<<endl;
            	 //Mat single_eigenvalue(10304,1,CV_64FC1,Scalar(val));
            	  eigenvectors1.col(q)=(eigenvectors.col(q))*1.0;

            	 //cout<<eigenvectors1.at<double>(0,0)<<"\t"<<eigenvectors.at<double>(0,0)<<"\t"<<val<<endl;
                // eigenvectors.col(q)=(eigenvectors.col(q)).mul(single_eigenvalue);
              	  //cout<<eigenvectors<<endl;
            	 }

              //Mat M(10304,50,CV_64F,Scalar(1));
              //eigenvectors1=eigenvectors1.mul(M);
        /*     for(int t=0;t<50;t++)
              {
              Mat a;
              a.create(10304,1,CV_64F);
              a=eigenvectors.col(t);
              a.convertTo(a,0);
              a=a.reshape(0,112);
               imshow("eigenface",a);
               waitKey(0);
              }
        */
    Mat projections[50];
    Mat temp;
    fs["projections"] >> temp;

   /* int i=0;
    FileNode n = fs["projections"];
        for (FileNodeIterator current = n.begin(); current != n.end(); current++)
        {
            FileNode item = *current;
            item >> projections[i];
            projections[i]=projections[i].reshape(0,50);
            projections[i].pop_back(num_removed_eigenfaces);
            i++;
        }
*/
    for(int i=0;i<50;i++)
    {
    	fs["projections"] >> temp;
    	projections[i] = temp.col(i).clone();
    	//projections[i].pop_back(num_removed_eigenfaces);

    }

    Mat indices;
            fs["indices"] >> indices;

   Mat testSample = imread("1.pgm",0);

   testSample=testSample.reshape(0,10304);
   testSample.convertTo(testSample,6);

   Mat sub_vec;

   sub_vec=testSample-mean_vec;
 //  cout<<eigenvectors1<<endl;
  /* sub_vec=sub_vec.reshape(0,112);
   imshow("subvec",sub_vec);

   waitKey(0);*/
//cout<<sub_vec<<endl;
   Mat trans_eigenspace=eigenvectors1.reshape(0,50);//transpose
   PCA eigenspace(eigenvectors1,noArray(),CV_PCA_DATA_AS_COL);

   //Mat test_weight=eigenspace.project(sub_vec);
   //cout<<test_weight<<endl;
   Mat test_weight;
   test_weight=trans_eigenspace*sub_vec;
  // cout<<test_weight<<endl;
   //test_weight.pop_back(num_removed_eigenfaces);

  Scalar s[50];

   for(int j=0;j<50;j++)
   {
	   Mat diff=test_weight-projections[j];
	   pow(diff,2,diff);
	   s[j]=sum(diff);
	   sqrt(s[j],s[j]);
	   //cout<<s[j][0]<<endl;
   }

   Scalar min=s[0];
   int m;
   for(int k=0;k<50;k++)
   {
	 if(s[k][0]<min[0])
	{
		 min=s[k];
		 m=k;
	}
  }
//m++;
//int predicted=m/10;
   Mat predicted_mat=indices.col(m).clone();
   int predicted=predicted_mat.at<int>(0,0);

cout<<predicted<<endl;
    // fs.release();
        return (0);
}
