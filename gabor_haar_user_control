#include <stdio.h>
#include <iostream>
#include <vector>
#include <math.h>
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

using namespace std;
using namespace cv;

int kernel_size=21;
int pos_sigma= 5;
int pos_lm = 50;
int pos_th = 0;
int pos_psi = 0;
cv::Mat src_f;
cv::Mat dest;
const char* cascade_name ="cars3.xml";


cv::Mat mkKernel(int ks, double sig, double th, double lm, double ps)
    {
        int hks = (ks-1)/2;
        double theta = th*CV_PI/180;
        double psi = ps*CV_PI/180;
        double del = 2.0/(ks-1);
        double lmbd = lm;
        double sigma = sig/ks;
        double x_theta;
        double y_theta;
        cv::Mat kernel(ks,ks, CV_32F);
        for (int y=-hks; y<=hks; y++)
        {
            for (int x=-hks; x<=hks; x++)
            {
                x_theta = x*del*cos(theta)+y*del*sin(theta);
                y_theta = -x*del*sin(theta)+y*del*cos(theta);
                kernel.at<float>(hks+y,hks+x) = (float)exp(-0.5*(pow(x_theta,2)+pow(y_theta,2))/pow(sigma,2))* cos(2*CV_PI*x_theta/lmbd + psi);
            }
        }
        return kernel;
    }

void Process(int , void *)
    {
        double sig = pos_sigma;
        double lm = 0.5+pos_lm/100.0;
        double th = pos_th;
        double ps = pos_psi;
        cv::Mat kernel = mkKernel(kernel_size, sig, th, lm, ps);
        cv::filter2D(src_f, dest, CV_32F, kernel);
        //cv::imshow("Process window", dest);
                cv::Mat Lkernel(kernel_size*20, kernel_size*20, CV_32F);
                cv::resize(kernel, Lkernel, Lkernel.size());
                Lkernel /= 2.;
                Lkernel += 0.5;
                cv::imshow("Kernel", Lkernel);

    }

IplImage detect_and_draw(IplImage* img)
  {
 	 static CvMemStorage* storage = 0;
 	 static CvHaarClassifierCascade* cascade = 0;
 	 int scale = 1;
 	 IplImage* temp = cvCreateImage(cvSize(img->width / scale, img->height / scale), 8, 3);
 	 CvPoint pt1, pt2;
  	int i;
  	cascade = (CvHaarClassifierCascade*)cvLoad(cascade_name, 0, 0, 0);

  	storage = cvCreateMemStorage(0);
  	cvClearMemStorage(storage);
 if (cascade)
  	{
  		CvSeq* faces = cvHaarDetectObjects(img, cascade, storage,
  			1.1, 2, CV_HAAR_DO_CANNY_PRUNING,
  			cvSize(40, 40));
  		for (i = 0; i < (faces ? faces->total : 0); i++)
  		{
  			CvRect* r = (CvRect*)cvGetSeqElem(faces, i);
  			pt1.x = r->x*scale;
  			pt2.x = (r->x + r->width)*scale;
  			pt1.y = r->y*scale;
  			pt2.y = (r->y + r->height)*scale;
  			cvRectangle(img, pt1, pt2, CV_RGB(255, 255, 255), 3, 8, 0);
  		}
  	}

  	cvReleaseImage(&temp);
  	return *img;
  }

int main(int argc, char** argv)
{
	CvCapture *camera=cvCaptureFromFile("sample.avi");
        while (cvWaitKey(10)!=atoi("q"))
        {
        			IplImage *img=cvQueryFrame(camera);
        	    	cv::Mat image = cvarrToMat(img);
        	        //cv::imshow("Src", image);
        	        cv::Mat src;
        	        cv::cvtColor(image, src, CV_BGR2GRAY);
        	        src.convertTo(src_f, CV_32F, 1.0/255, 0);
        	        if (!kernel_size%2)
        	        {
        	            kernel_size+=1;
        	        }
        	        cv::namedWindow("user control", 1);
        	        cv::createTrackbar("Sigma", "user control", &pos_sigma, kernel_size, Process);
        	        cv::createTrackbar("Lambda", "user control", &pos_lm, 100, Process);
        	        cv::createTrackbar("Theta", "user control", &pos_th, 360, Process);
        	        cv::createTrackbar("Psi", "user control", &pos_psi, 360, Process);
        	        Process(0,0);
        	        cv::imshow("user controls", dest);
        	        IplImage copy = dest;
        	           IplImage* new_image = &copy;
        	           IplImage* haar = cvCreateImage(cvGetSize(new_image), IPL_DEPTH_8U, 1);
        	           IplImage img_1=detect_and_draw(haar);
        	           cvShowImage("detection with segmn", &img_1);

        	           IplImage img_2=detect_and_draw(img);
        	           cvShowImage("normal car detection", &img_2);



        	        dest*=0;
        }


        cv::waitKey(0);
        return 0;
}

