#include "opencv2/opencv.hpp"
#include <fstream>
#include <opencv2/core/core.hpp>
#include <iostream>
#include <string>

using namespace cv;
using namespace std;

//Image information
int img_cols=92;
int img_rows=112;
int img_size = img_cols*img_rows;

//Folder information
int num_folders=5;
int num_images_per_folder=10;
int total_num_images=num_folders*num_images_per_folder; // Total images in training set

int main()
{

//Train Space
Mat train_space(img_size,1,CV_64FC1,Scalar(1)); //initialised for use in line 46
Mat sum_avg(112,92,CV_64FC1,Scalar(0)); // 64 bit float single channel. All values initialized to 0.

// Step.1 : Generate Face Vectors from Training images
for(int j=1;j<=num_folders;j++)
{
for(int i=1;i<=num_images_per_folder;i++)
{
stringstream file_loc; // Load file path into file_loc
file_loc << "Img_train_folder/s"<<j<<"/"<< i<<".pgm"; // .pgm files are written into file_loc
Mat img_read=imread(file_loc.str(),0); // Read images into img_read
img_read.convertTo(img_read,6); //Converts to 64 float

sum_avg=img_read+sum_avg; //Used for Normalizing images in Step.2

img_read=img_read.reshape(0,img_size); // 1D column vector. 0 is for retaining pre-existing color channel.
hconcat(train_space,img_read,train_space); // Build Train space by concatenating images

}
}
train_space = train_space.colRange(1,train_space.cols); // Removes first column which was initialized to 1

// Step.2 :Normalize images - Calculate average and subtract from images

Mat Img_avg=(sum_avg)/(total_num_images); // Averaging

/*
// Code to display the average face
sum_avg.convertTo(sum_avg,0);
imshow("result",sum_avg);
waitKey(0);
*/

Img_avg=Img_avg.reshape(0,img_size); // Converting average image into a 1D column vector.

Mat temp=Img_avg;

        for(int i=0;i<total_num_images-1;i++)
        {
         hconcat(Img_avg,temp,Img_avg); // Creating a matrix of equal size as train_space for subtraction from train space i.e. Normalizations.
        }
        Mat norm_space=train_space-Img_avg; // Normalized image space.

   //Step.3: Eigen Vectors Calculation --> Principal Component Analysis.(eigenvectors and eigenvalues)

        PCA eigenvec_lowdim(norm_space,noArray(),CV_PCA_DATA_AS_COL); // calculates the covariance matrix by itself

             Mat eigenspace=eigenvec_lowdim.eigenvectors.clone();
             Mat eigenvalues=eigenvec_lowdim.eigenvalues.clone();

             eigenspace=eigenspace.t(); // the PCA class gives transposed eigenmatrix output, so it has to be transposed.

/*
         //Show Eigen Faces as images.
             Mat eigenface_space_norm;
             Mat eigenface_space=eigenspace; // Look at line 63.
             normalize(eigenface_space,eigenface_space_norm,0,255,NORM_MINMAX,CV_8UC1); //converts the type to unsigned char 8 bits.

          // This code displays the eigenfaces on window.
             for(int i=0;i<eigenface_space.cols;i++)
            {
             Mat eigenface;
             eigenface=eigenface_space_norm.col(i).clone(); // copy each column of eigenspace to a new Mat. NOTE: the Mat.clone() function is a must so that Mat eigenface is continuous (must for displaying).
                eigenface=eigenface.reshape(0,img_rows);
             imshow("eigenfaces",eigenface);
             waitKey(0);
             }
*/

   // Step.4: Projecting Training Images into Eigenspace for creating Face feature vectors of training images.

             Mat trans_eigenspace; // Transposed eigenspace.
             trans_eigenspace=eigenspace.t(); // Transposition of eigenspace.

             Mat projections; // Contains weights for all the face vectors.
             projections=trans_eigenspace*norm_space; // The product of transposed eigenspace and the normalised train space gives the entire projection matrix.


    // Step.5: Creating an array of indexes for all the images.

             Mat labels(1,1,CV_32SC1,Scalar(0));

             for(int i=0;i<num_folders;i++)
             {
             for(int j=0;j<num_images_per_folder;j++)
             {
             Mat index(1,1,CV_32SC1,Scalar(0));
             if(j!=num_images_per_folder)
             {
             index=i;
             }

             labels.push_back(index);
             }
             }

             labels=labels.rowRange(1,labels.rows);
             labels=labels.t();


    // Step.8: Calculating distances between every pair of two images and calculating the unknown threshold using that.

             Scalar array[total_num_images];
             int weight_index=0;
             for(int counter1=0;counter1<total_num_images;counter1++)
             {
            	 for(int counter2=counter1;counter2<total_num_images;counter2++)
            	 {
            		 if(counter2==counter1)
            			 continue;
            		 else
            		 {
            			 Mat diff=projections.col(counter1).clone()-projections.col(counter2).clone();
            		     pow(diff,2,diff);
            		     array[weight_index]=sum(diff);
            		     sqrt(array[weight_index],array[weight_index]);
            		     weight_index++;
            		 }
            	 }
              }

             Scalar max=array[0];
                for(int k=0;k<total_num_images;k++) // loop for calculating minimum of all the euclidean distances
                {
             	 if(array[k][0]>max[0])
             	{
             		 max=array[k];
             	}
               }
      Mat threshold(1,1,CV_64FC1,Scalar(0));
      threshold=0.5*max[0];

    // Step.7: Storing all the obtained data into an xml file.

             string filename = "/home/maxerience-l2/cuda-workspace/Face_detect/data_5_10.xml";
             FileStorage fs(filename, FileStorage::WRITE);

             temp=temp.reshape(0,1); // Have to be stored as a row vector for the standard recognition function to work.

             fs << "mean" << temp;
             fs << "eigenvectors" << eigenspace;
             fs << "eigenvalues" << eigenvalues;

             fs << "projections" << "[";
                    for(int c=0;c<total_num_images;c++)
                      {
                         Mat temporary=projections.col(c).clone().t();
                         fs << temporary;
                      }
                         fs << "]";

             fs << "labels" << labels;
             fs << "threshold" << threshold;

       return 0;
}
